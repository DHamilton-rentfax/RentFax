\'use client\'\n\nimport { useState } from \'react\'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \'@/components/ui/dialog\'\nimport { Input } from \'@/components/ui/input\'\nimport { Button } from \'@/components/ui/button\'\nimport PhoneInput from \'react-phone-input-2\'\nimport \'react-phone-input-2/lib/style.css\'\nimport countryList from \'react-select-country-list\'\nimport Select from \'react-select\'\nimport { Loader2 } from \'lucide-react\'\n\nexport default function RenterSearchModal({ open, setOpen }: any) {\n  const countries = countryList().getData()\n  const [form, setForm] = useState({\n    firstName: \'\',\n    lastName: \'\',\n    licenseNumber: \'\',\n    email: \'\',\n    phone: \'\',\n    address: \'\',\n    country: \'US\',\n  })\n  const [loading, setLoading] = useState(false)\n  const [results, setResults] = useState<any[]>([])\n  const [searched, setSearched] = useState(false)\n  const [aiSummary, setAiSummary] = useState<any>(null)\n  const [processingPayment, setProcessingPayment] = useState(false)\n\n  const handleSearch = async () => {\n    setLoading(true)\n    setSearched(true)\n    setResults([])\n    setAiSummary(null)\n    try {\n      const res = await fetch(\'/api/renter/search\', {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify(form),\n      })\n      const data = await res.json()\n      if (data.matches?.length > 0) {\n        setResults(data.matches)\n      } else {\n        // trigger AI analyze\n        const aiRes = await fetch(\'/api/ai/analyze\', {\n          method: \'POST\',\n          headers: { \'Content-Type\': \'application/json\' },\n          body: JSON.stringify(form),\n        })\n        const aiData = await aiRes.json()\n        setAiSummary(aiData)\n      }\n    } catch (err) {\n      console.error(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handlePayment = async (type: \'verification\' | \'report\') => {\n    setProcessingPayment(true)\n    try {\n      const res = await fetch(`/api/stripe/${type}`, {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify({ email: form.email }),\n      })\n      const data = await res.json()\n      if (data.url) window.location.href = data.url\n    } catch (err) {\n      console.error(err)\n      alert(\'Payment failed. Please try again.\')\n    } finally {\n      setProcessingPayment(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className="sm:max-w-lg bg-white/90 backdrop-blur-md rounded-2xl p-6">\n        <DialogHeader>\n          <DialogTitle className="text-xl font-semibold text-gray-900">\n            Search RentFAX Records\n          </DialogTitle>\n        </DialogHeader>\n\n        {/* --- Form --- */}\n        <div className="space-y-3">\n          <div className="grid grid-cols-2 gap-2">\n            <Input\n              placeholder="First Name"\n              value={form.firstName}\n              onChange={(e) => setForm({ ...form, firstName: e.target.value })}\n            />\n            <Input\n              placeholder="Last Name"\n              value={form.lastName}\n              onChange={(e) => setForm({ ...form, lastName: e.target.value })}\n            />\n          </div>\n          <Input\n            placeholder="Driver’s License / ID Number"\n            value={form.licenseNumber}\n            onChange={(e) => setForm({ ...form, licenseNumber: e.target.value })}\n          />\n          <Input\n            placeholder="Email Address"\n            value={form.email}\n            onChange={(e) => setForm({ ...form, email: e.target.value })}\n          />\n          <PhoneInput\n            country={form.country.toLowerCase()}\n            value={form.phone}\n            onChange={(phone, country:any) =>\n              setForm({ ...form, phone, country: country.countryCode.toUpperCase() })\n            }\n            inputStyle={{ width: \'100%\' }}\n          />\n          <Input\n            placeholder="Address (include postal code)"\n            value={form.address}\n            onChange={(e) => setForm({ ...form, address: e.target.value })}\n          />\n          <Select\n            options={countries}\n            value={countries.find((c) => c.value === form.country)}\n            onChange={(val: any) => setForm({ ...form, country: val.value })}\n            placeholder="Select Country"\n          />\n\n          <Button\n            onClick={handleSearch}\n            disabled={loading}\n            className="w-full bg-blue-600 hover:bg-blue-700 text-white mt-2"\n          >\n            {loading ? (\n              <>\n                <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Searching...\n              </>\n            ) : (\n              \'Search Reports\'\n            )}\n          </Button>\n        </div>\n\n        {/* --- Results --- */}\n        {searched && !loading && (\n          <div className="mt-6">\n            {results.length > 0 ? (\n              <>\n                <h3 className="text-lg font-medium mb-3">\n                  {results.length} potential record{results.length > 1 && \'s\'} found\n                </h3>\n                <div className="space-y-3 max-h-56 overflow-y-auto">\n                  {results.map((r, i) => (\n                    <div key={i} className="border p-3 rounded-lg bg-gray-50">\n                      <p className="font-semibold">\n                        {r.renterName} ({r.renterCountry})\n                      </p>\n                      <p className="text-sm text-gray-500">{r.renterEmail}</p>\n                      <div className="flex items-center mt-1">\n                        <div className="h-2 w-full bg-gray-200 rounded-full mr-2">\n                          <div\n                            className="h-2 bg-green-500 rounded-full"\n                            style={{ width: `${r.matchScore}%` }}\n                          ></div>\n                        </div>\n                        <span className="text-xs font-medium">{r.matchScore}% match</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <Button\n                  onClick={() => handlePayment(\'report\')}\n                  disabled={processingPayment}\n                  className="mt-4 w-full bg-emerald-600 hover:bg-emerald-700 text-white"\n                >\n                  {processingPayment ? \'Processing...\' : \'Unlock Risk Report – $20\'}\n                </Button>\n              </>\n            ) : aiSummary ? (\n              <div className="bg-gray-50 border p-4 rounded-lg">\n                <h4 className="font-semibold mb-2 text-gray-800">AI Summary</h4>\n                <p className="text-sm text-gray-600 mb-3">{aiSummary.message}</p>\n                <p className="text-sm text-gray-500">\n                  AI Confidence: <span className="font-semibold">{aiSummary.confidence}%</span>\n                </p>\n                <Button\n                  onClick={() => handlePayment(\'verification\')}\n                  disabled={processingPayment}\n                  className="mt-4 w-full bg-yellow-500 hover:bg-yellow-600 text-white"\n                >\n                  {processingPayment ? \'Processing...\' : \'Start New Verification – $4.99\'}\n                </Button>\n              </div>\n            ) : (\n              <p className="text-sm text-gray-500 text-center">\n                No reports found. RentFAX AI is analyzing data...\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* --- Login Footer --- */}\n        <p className="text-center text-sm text-gray-500 mt-6">\n          Already have an account?{\' \}\n          <a href="/login" className="font-semibold text-blue-600 hover:underline">\n            Log in\n          </a>\n        </p>\n      </DialogContent>\n    </Dialog>\n  )\n}\n