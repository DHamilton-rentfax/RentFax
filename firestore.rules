rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Auth helper functions
    function isAuthed() {
      return request.auth != null;
    }
    function isSuperAdmin() {
      return isAuthed() && request.auth.token.role == 'superadmin';
    }
    function isOwner(companyId) {
      return isAuthed() && request.auth.token.companyId == companyId && request.auth.token.role == 'owner';
    }
    function isManager(companyId) {
      return isAuthed() && request.auth.token.companyId == companyId && ['owner','manager'].includes(request.auth.token.role);
    }
    function isAgent(companyId) {
       return isAuthed() && request.auth.token.companyId == companyId && ['owner','manager','agent'].includes(request.auth.token.role);
    }
    function belongsToCompany(companyId) {
        return isAuthed() && request.auth.token.companyId == companyId;
    }

    // Company: must be owner to edit, any member to read.
    match /companies/{companyId} {
      allow read: if belongsToCompany(companyId) || isSuperAdmin();
      allow update: if isOwner(companyId) || isSuperAdmin();
      allow create: if isAuthed(); // User must be able to create a company on signup
    }

    // Company Rules: Manager can edit, public can read
    match /companyRules/{companyId} {
        allow read: if true;
        allow write: if isManager(companyId) || isSuperAdmin();
    }
    
    // Renters: Agents can create/update, only for their company
    match /renters/{renterId} {
      allow read: if belongsToCompany(request.resource.data.companyId);
      allow create, update: if isAgent(request.resource.data.companyId);
      allow delete: if isManager(request.resource.data.companyId);
    }
    
    // Rentals: Agents can manage
    match /rentals/{rentalId} {
        allow read: if belongsToCompany(request.resource.data.companyId);
        allow create, update: if isAgent(request.resource.data.companyId);
        allow delete: if isManager(request.resource.data.companyId);
    }

    // Incidents: Agents can manage
    match /incidents/{incidentId} {
        allow read: if belongsToCompany(request.resource.data.companyId);
        allow create, update: if isAgent(request.resource.data.companyId);
        allow delete: if isManager(request.resource.data.companyId);
    }

    // Disputes: company members can read, only specific roles can create/update
    match /disputes/{disputeId} {
        allow read: if belongsToCompany(resource.data.companyId);
        allow create: if isAuthed(); // Both renters and agents can create
        allow update: if belongsToCompany(resource.data.companyId); // Logic is handled in flow
    }

    // Invites: Managers can create, anyone can read if they have the token (ID)
    match /invites/{inviteId} {
        allow read: if isAuthed();
        allow create: if isManager(request.resource.data.companyId);
        allow update: if isAuthed(); // For accepting invite
    }

    // Audit Logs: Read-only for managers
    match /auditLogs/{logId} {
        allow read: if isManager(resource.data.companyId);
        allow write: if false; // Only backend can write
    }

    // User profile: only user can access
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}
