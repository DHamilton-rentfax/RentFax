rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Auth helper functions
    function isAuthed() {
      return request.auth != null;
    }
    function isOwner(companyId) {
      return request.auth.token.role == 'owner' && request.auth.token.companyId == companyId;
    }
    function isManager(companyId) {
       return request.auth.token.role == 'manager' && request.auth.token.companyId == companyId;
    }
    function isAgent(companyId) {
       return request.auth.token.role == 'agent' && request.auth.token.companyId == companyId;
    }
     function isStaff(companyId) {
       return isOwner(companyId) || isManager(companyId) || isAgent(companyId);
    }
    function isSuperadmin() {
        return request.auth.token.role == 'superadmin';
    }

    // Collection Rules
    match /companies/{companyId} {
      allow read: if isAuthed() && request.auth.token.companyId == companyId;
      allow write: if isOwner(companyId) || isManager(companyId) || isSuperadmin(); // Or on create for new owner
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    match /renters/{renterId} {
      allow read, write: if isAuthed() && resource.data.companyId == request.auth.token.companyId;
      allow create: if isAuthed() && request.resource.data.companyId == request.auth.token.companyId;
    }

    match /rentals/{rentalId} {
       allow read, write: if isAuthed() && resource.data.companyId == request.auth.token.companyId;
       allow create: if isAuthed() && request.resource.data.companyId == request.auth.token.companyId;
    }
    
    match /incidents/{incidentId} {
      allow read, write: if isAuthed() && resource.data.companyId == request.auth.token.companyId;
      allow create: if isAuthed() && request.resource.data.companyId == request.auth.token.companyId;
    }

    match /disputes/{disputeId} {
      allow read: if isAuthed() && resource.data.companyId == request.auth.token.companyId;
      // Allow renter who opened it, or company staff
      allow write: if isAuthed() && resource.data.companyId == request.auth.token.companyId &&
                  (isStaff(resource.data.companyId) || request.auth.uid == resource.data.renterUid);
    }

    match /invites/{inviteId} {
        allow read: if isAuthed() && resource.data.companyId == request.auth.token.companyId;
        allow create, write: if isAuthed() && request.auth.token.companyId == request.resource.data.companyId && (isOwner(request.resource.data.companyId) || isManager(request.resource.data.companyId));
    }
    
    match /auditLogs/{logId} {
        allow read: if isAuthed() && resource.data.companyId == request.auth.token.companyId && (isOwner(resource.data.companyId) || isManager(resource.data.companyId));
        allow create: if isAuthed(); // Flow can write
    }
    
    match /companyRules/{companyId} {
        allow read: true; // Publicly readable
        allow write: if isAuthed() && (isOwner(companyId) || isManager(companyId));
    }
    
    match /uploadBatches/{batchId} {
      allow read, write: if isAuthed() && (isOwner(resource.data.companyId) || isManager(resource.data.companyId));
      allow create: if isAuthed() && (isOwner(request.resource.data.companyId) || isManager(request.resource.data.companyId));
    }

  }
}
