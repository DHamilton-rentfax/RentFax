
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /companies/{companyId} {
      allow read: if request.auth.uid != null && request.auth.token.companyId == companyId;
      // Disallow all client-side writes to company billing info
      allow write: if false; 
    }

     match /applications/{appId} {
      // Allow public to submit applications
      allow create: if true; 
      // Only authenticated admins can read or modify applications
      allow read, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role IN ['owner', 'manager'];
    }
    
    match /users/{userId} {
      allow read: if request.auth.uid == userId;

      // Allow profile updates but disallow any changes to billing or credit fields.
      allow update: if request.auth.uid == userId
                    && !("plan" in request.resource.data)
                    && !("addons" in request.resource.data)
                    && !("subscriptionStatus" in request.resource.data)
                    && !("credits" in request.resource.data);
    }

    match /orgs/{orgId} {
      allow read, write: if request.auth.uid != null && request.auth.token.orgId == orgId;

      match /renters/{renterId} {
        allow read: if request.auth.uid != null && request.auth.token.orgId == orgId;
        allow write: if request.auth.uid != null && request.auth.token.orgId == orgId;
      }

      match /logs/{logId} {
        allow read: if request.auth.uid != null && request.auth.token.orgId == orgId;
        allow create: if request.auth.uid != null;
        allow update, delete: if false; // Immutable
      }
    }

    match /renters/{renterId} {
        allow read: if request.auth.uid == renterId;
        allow update: if request.auth.uid == renterId && request.resource.data.keys().hasOnly(['dispute']);
    }
  }
}
