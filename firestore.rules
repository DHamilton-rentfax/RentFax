
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth.token.role == "SUPER_ADMIN";
    }
    
    function isAdmin() {
      return request.auth.token.role == "ADMIN" || isSuperAdmin();
    }
    
    function isEditor() {
      return request.auth.token.role == "EDITOR" || isAdmin();
    }

    function isUser() {
      return request.auth.token.role == "USER" || isEditor();
    }
    
    function isBanned() {
        return request.auth.token.role == "BANNED";
    }
    
    function isOwner(companyId) {
      return request.auth.token.companyId == companyId && request.auth.token.role == 'owner';
    }

    // Org-level data is private
    match /companies/{companyId} {
      allow read: if isUser() && request.auth.token.companyId == companyId;
      allow write: if isOwner(companyId);
    }
    
    match /invites/{inviteId} {
      allow read, write: if isAdmin();
    }
    
    match /users/{userId} {
      allow read: if isUser();
      allow write: if isSuperAdmin() || (isAdmin() && request.auth.token.companyId == resource.data.companyId);
    }
    
    match /renters/{renterId} {
        allow read, write: if isEditor() && request.auth.token.companyId == resource.data.companyId;
        // Renter-specific access for portal
        allow read: if request.auth.uid == resource.data.renterUid;
    }
    
    match /incidents/{incidentId} {
        allow read, write: if isEditor() && request.auth.token.companyId == resource.data.companyId;
    }
    
    match /disputes/{disputeId} {
       allow read, write: if isEditor() && request.auth.token.companyId == resource.data.companyId;
       // Renter-specific access
       allow read, write: if request.auth.uid == resource.data.renterUid;
    }

    // Tamper-proof audit logs
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isUser();
      allow update, delete: if false; // Immutable
    }
  }
}
