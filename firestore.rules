
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read and write their own data
    // This is a basic rule, you should refine it based on your app's logic.
    // For example, company data should only be accessible by members of that company.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    match /companies/{companyId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'manager'];
    }

    // Rules for subcollections
    match /renters/{renterId} {
        allow read, write: if request.auth != null && request.auth.token.companyId == resource.data.companyId;
    }
     match /incidents/{incidentId} {
        allow read, write: if request.auth != null && request.auth.token.companyId == resource.data.companyId;
    }
     match /disputes/{disputeId} {
        allow read, write: if request.auth != null && request.auth.token.companyId == resource.data.companyId;
    }
     match /rentals/{rentalId} {
        allow read, write: if request.auth != null && request.auth.token.companyId == resource.data.companyId;
    }
      match /invites/{inviteId} {
        allow read, write: if request.auth != null;
    }
  }
}
