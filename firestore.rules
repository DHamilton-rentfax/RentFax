
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // secure by default
    match /{document=**} {
      allow read, write: if false;
    }

    // disputes can be written by clients, read by admins
    match /disputes/{disputeId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN','SUPER_ADMIN'];
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN','SUPER_ADMIN'];
    }

    // renters can be created by anyone, but only read/updated by staff
    match /renters/{renterId} {
      allow create: if true;
      allow read, update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN','SUPER_ADMIN'];
    }

    // verificationTokens can be created server-side, but not read by clients
    match /verificationTokens/{tokenId} {
      allow read, write: if false;
    }

    // users can only be managed by SUPER_ADMINS, or the user themselves for their own doc
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SUPER_ADMIN');
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SUPER_ADMIN');
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SUPER_ADMIN';
    }

     // systemSettings are read-only for clients
    match /systemSettings/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SUPER_ADMIN';
    }

    // subscriptions are read-only for clients, managed by webhooks
    match /subscriptions/{subId} {
      allow read: if request.auth != null;
      allow write: if false; // Only server/webhook can write
    }
  }
}
