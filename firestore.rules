
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSuperAdmin() {
      return request.auth.token.role == 'superadmin';
    }
    function isCompanyOwner(companyId) {
      return request.auth.token.role == 'owner' && request.auth.token.companyId == companyId;
    }
    function isCompanyManager(companyId) {
      return request.auth.token.role in ['owner', 'manager'] && request.auth.token.companyId == companyId;
    }
    function isCompanyMember(companyId) {
      return request.auth.token.role in ['owner', 'manager', 'agent', 'collections'] && request.auth.token.companyId == companyId;
    }
    function isRenter(renterId) {
      let renterUid = get(/databases/$(database)/documents/renters/$(renterId)).data.renterUid;
      return renterUid != null && request.auth.uid == renterUid;
    }

    match /companies/{companyId} {
      allow read: if isCompanyMember(companyId);
      allow write: if isCompanyOwner(companyId);
    }

    match /companyRules/{companyId} {
        allow read: if true; // Publicly readable
        allow write: if isCompanyManager(companyId);
    }
    
    match /companyStats/{companyId} {
        allow read: if isCompanyMember(companyId);
        // Only allow server-side writes
        allow write: if false;
    }

    match /renters/{renterId} {
      allow read: if isCompanyMember(resource.data.companyId) || isRenter(renterId);
      allow create, update: if isCompanyMember(request.resource.data.companyId);
      allow delete: if isCompanyManager(resource.data.companyId);
    }
    
    match /rentals/{rentalId} {
      allow read: if isCompanyMember(resource.data.companyId) || isRenter(resource.data.renterId);
      allow create, update: if isCompanyMember(request.resource.data.companyId);
      allow delete: if isCompanyManager(resource.data.companyId);
    }

    match /incidents/{incidentId} {
      allow read: if isCompanyMember(resource.data.companyId) || isRenter(resource.data.renterId);
      allow create, update: if isCompanyMember(request.resource.data.companyId);
      allow delete: if isCompanyManager(resource.data.companyId);
    }

    match /disputes/{disputeId} {
      allow read, write: if isCompanyMember(resource.data.companyId) || isRenter(resource.data.renterId);
    }
    
    match /invites/{inviteId} {
        allow read: if isCompanyManager(resource.data.companyId);
        // Let server handle create/accept logic
        allow write: if false; 
    }

    match /auditLogs/{logId} {
        allow read: if isCompanyManager(resource.data.companyId);
        allow write: if false; // Server-only
    }
    
     match /mail/{mailId} {
      allow read, write: if false; // Server-only
    }
  }
}
